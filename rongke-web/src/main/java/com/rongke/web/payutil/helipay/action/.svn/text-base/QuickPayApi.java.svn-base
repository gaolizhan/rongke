package com.helipay.demo.action;

import java.util.Map;

import org.apache.commons.httpclient.HttpStatus;
import org.apache.commons.logging.Log;
import org.apache.commons.logging.LogFactory;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.ResponseBody;
import org.springframework.web.servlet.ModelAndView;

import com.alibaba.fastjson.JSONException;
import com.alibaba.fastjson.JSONObject;
import com.helipay.demo.util.HttpClientService;
import com.helipay.demo.util.MessageHandle;
import com.helipay.demo.vo.request.AgreementBindCardValidateCodeVo;
import com.helipay.demo.vo.request.BindCardPayVo;
import com.helipay.demo.vo.request.BindCardVo;
import com.helipay.demo.vo.request.BindPayValidateCodeVo;
import com.helipay.demo.vo.request.ConfirmPayVo;
import com.helipay.demo.vo.request.CreateOrderVo;
import com.helipay.demo.vo.request.QueryOrderVo;
import com.helipay.demo.vo.request.SendValidateCodeVo;
import com.helipay.demo.vo.response.AgreementSendValidateCodeResponseVo;
import com.helipay.demo.vo.response.BindCardPayResponseVo;
import com.helipay.demo.vo.response.BindCardResponseVo;
import com.helipay.demo.vo.response.BindPayValidateCodeResponseVo;
import com.helipay.demo.vo.response.ConfirmPayResponseVo;
import com.helipay.demo.vo.response.CreateOrderResponseVo;
import com.helipay.demo.vo.response.QueryOrderResponseVo;
import com.helipay.demo.vo.response.sendValidateCodeResponseVo;

/**
 * @author heli50
 */ //快捷支付接口方式
@Controller
@RequestMapping("/quickPayApi")
public class QuickPayApi{

	private final Log log = LogFactory.getLog(QuickPayApi.class);

	public static final String MERCHANT_NO = "C1800000002";

//	public static final String MERCHANT_NO = "C1800001108";

//	public static final String REQUEST_URL_TRANSFER = "http://192.168.33.21:18182/trx/transfer/interface.action";
	public static final String REQUEST_URL_TRANSFER = "http://test.trx.helipay.com/trx/transfer/interface.action";
//	public static final String REQUEST_URL_TRANSFER = "http://pay.trx.helipay.com/trx/transfer/interface.action";

//		public static final String REQUEST_URL_QUICKPAY = "http://192.168.33.21:18182/trx/quickPayApi/interface.action";
		public static final String REQUEST_URL_QUICKPAY = "http://test.trx.helipay.com/trx/quickPayApi/interface.action";
//	public static final String REQUEST_URL_QUICKPAY = "http://pay.trx.helipay.com/trx/quickPayApi/interface.action";

	@RequestMapping(value = "/createOrder")
	public ModelAndView createOrder(CreateOrderVo requestVo, Model model) {
		log.info("--------进入创建订单接口----------");
		ModelAndView mav = new ModelAndView();
		mav.setViewName("quickPayApi/createOrder");
		try {
			Map reqestMap = MessageHandle.getReqestMap(requestVo);
			log.info("请求参数：" + reqestMap);
			Map<String, Object> resultMap = HttpClientService.getHttpResp(reqestMap, REQUEST_URL_QUICKPAY);
			log.info("响应结果：" + resultMap);

			if ((Integer) resultMap.get("statusCode") != HttpStatus.SC_OK) {
				mav.addObject("message", "请求失败");
				return mav;
			}

			String resultMsg = (String) resultMap.get("response");
			if (!isJSON(resultMsg)) {
				mav.addObject("message", resultMsg);
				return mav;
			}

			CreateOrderResponseVo responseVo = JSONObject.parseObject(resultMsg, CreateOrderResponseVo.class);
			if (!MessageHandle.checkSign(responseVo)) {
				mav.addObject("message", "验签失败");
				return mav;
			}

			if (!"0000".equals(responseVo.getRt2_retCode())) {
				mav.addObject("message", responseVo.getRt3_retMsg());
				return mav;
			}

			mav.setViewName("quickPayApi/nextStep");
			mav.addObject("P2_customerNumber", responseVo.getRt4_customerNumber());
			mav.addObject("P3_orderId", responseVo.getRt5_orderId());
			mav.addObject("P5_phone", requestVo.getP13_phone());

		} catch (Exception e) {
			log.info("交易异常：" + e.getMessage(), e);
			mav.addObject("message", "交易异常：" + e.getMessage());
		}
		return mav;
	}

	@ResponseBody
	@RequestMapping("agreementBindCardValidateCode")
	public JSONObject agreementBindCardValidateCode(AgreementBindCardValidateCodeVo requestVo, Model model) {
		log.info("--------进入发送短信接口----------");
		JSONObject json = new JSONObject();
		try {
			Map reqestMap = MessageHandle.getReqestMap(requestVo);
			Map<String, Object> resultMap = HttpClientService.getHttpResp(reqestMap, REQUEST_URL_QUICKPAY);
			log.info("响应结果：" + resultMap);

			if ((Integer) resultMap.get("statusCode") != HttpStatus.SC_OK) {
				json.put("code", "01");
				json.put("message", "请求失败");
				return json;
			}

			String resultMsg = (String) resultMap.get("response");
			if (!isJSON(resultMsg)) {
				json.put("code", "01");
				json.put("message", resultMsg);
				return json;
			}

			AgreementSendValidateCodeResponseVo responseVo = JSONObject.parseObject(resultMsg, AgreementSendValidateCodeResponseVo.class);
			if (!MessageHandle.checkSign(responseVo)) {
				json.put("code", "01");
				json.put("message", "验签失败");
				return json;
			}

			if (!"0000".equals(responseVo.getRt2_retCode())) {
				json.put("code", "01");
			} else {
				json.put("code", "00");
			}
			json.put("message", responseVo.getRt3_retMsg());
			return json;

		} catch (Exception e) {
			log.info("异常：" + e.getMessage(), e);
			json.put("code", "01");
			json.put("message", "请求异常：" + e.getMessage());
		}
		return json;
	}

	@ResponseBody
	@RequestMapping("sendValidateCode")
	public JSONObject sendValidateCode(SendValidateCodeVo requestVo, Model model) {
		log.info("--------进入发送短信接口----------");
		JSONObject json = new JSONObject();
		try {
			Map reqestMap = MessageHandle.getReqestMap(requestVo);
			Map<String, Object> resultMap = HttpClientService.getHttpResp(reqestMap, REQUEST_URL_QUICKPAY);
			log.info("响应结果：" + resultMap);

			if ((Integer) resultMap.get("statusCode") != HttpStatus.SC_OK) {
				json.put("code", "01");
				json.put("message", "请求失败");
				return json;
			}

			String resultMsg = (String) resultMap.get("response");
			if (!isJSON(resultMsg)) {
				json.put("code", "01");
				json.put("message", resultMsg);
				return json;
			}

			sendValidateCodeResponseVo responseVo = JSONObject.parseObject(resultMsg, sendValidateCodeResponseVo.class);
			if (!MessageHandle.checkSign(responseVo)) {
				json.put("code", "01");
				json.put("message", "验签失败");
				return json;
			}

			if (!"0000".equals(responseVo.getRt2_retCode())) {
				json.put("code", "01");
			} else {
				json.put("code", "00");
			}
			json.put("message", responseVo.getRt3_retMsg());
		} catch (Exception e) {
			e.printStackTrace();
			json.put("code", "01");
			json.put("message", "请求异常：" + e.getMessage());
		}
		return json;
	}

	@RequestMapping(value = "/confirmPay")
	public ModelAndView confirmPay(ConfirmPayVo requestVo, Model model) {
		log.info("--------进入确认支付接口----------");
		ModelAndView mav = new ModelAndView();
		mav.setViewName("quickPayApi/response");
		try {
			Map reqestMap = MessageHandle.getReqestMap(requestVo);
			Map<String, Object> resultMap = HttpClientService.getHttpResp(reqestMap, REQUEST_URL_QUICKPAY);
			log.info("响应结果：" + resultMap);

			if ((Integer) resultMap.get("statusCode") != HttpStatus.SC_OK) {
				mav.addObject("message", "请求失败");
				return mav;
			}

			String resultMsg = (String) resultMap.get("response");
			if (!isJSON(resultMsg)) {
				mav.addObject("message", resultMsg);
				return mav;
			}

			ConfirmPayResponseVo responseVo = JSONObject.parseObject(resultMsg, ConfirmPayResponseVo.class);
			if (!MessageHandle.checkSign(responseVo)) {
				mav.addObject("message", "验签失败");
				return mav;
			}

			mav.addObject("json", JSONObject.toJSON(responseVo));

		} catch (Exception e) {
			e.printStackTrace();
			mav.addObject("message", "交易异常：" + e.getMessage());
		}
		return mav;
	}

	@RequestMapping(value = "/bindCard")
	public ModelAndView bindCard(BindCardVo requestVo, Model model) {
		log.info("--------进入绑卡接口----------");
		ModelAndView mav = new ModelAndView();
		mav.setViewName("quickPayApi/response");
		try {
			Map reqestMap = MessageHandle.getReqestMap(requestVo);
			Map<String, Object> resultMap = HttpClientService.getHttpResp(reqestMap, REQUEST_URL_QUICKPAY);
			log.info("响应结果：" + resultMap);

			if ((Integer) resultMap.get("statusCode") != HttpStatus.SC_OK) {
				mav.addObject("message", "请求失败");
				return mav;
			}

			String resultMsg = (String) resultMap.get("response");
			if (!isJSON(resultMsg)) {
				mav.addObject("message", resultMsg);
				return mav;
			}

			BindCardResponseVo responseVo = JSONObject.parseObject(resultMsg, BindCardResponseVo.class);
			if (!MessageHandle.checkSign(responseVo)) {
				mav.addObject("message", "验签失败");
				return mav;
			}

			mav.addObject("json", JSONObject.toJSON(responseVo));
		} catch (Exception e) {
			e.printStackTrace();
			mav.addObject("message", "交易异常：" + e.getMessage());
		}
		return mav;
	}

	@ResponseBody
	@RequestMapping("bindPayValidateCode")
	public JSONObject bindPayValidateCode(BindPayValidateCodeVo requestVo, Model model) {
		log.info("--------进入发送短信接口----------");
		JSONObject json = new JSONObject();
		try {
			Map reqestMap = MessageHandle.getReqestMap(requestVo);
			Map<String, Object> resultMap = HttpClientService.getHttpResp(reqestMap, REQUEST_URL_QUICKPAY);
			log.info("响应结果：" + resultMap);

			if ((Integer) resultMap.get("statusCode") != HttpStatus.SC_OK) {
				json.put("code", "01");
				json.put("message", "请求失败");
				return json;
			}

			String resultMsg = (String) resultMap.get("response");
			if (!isJSON(resultMsg)) {
				json.put("code", "01");
				json.put("message", resultMsg);
				return json;
			}

			BindPayValidateCodeResponseVo responseVo = JSONObject.parseObject(resultMsg, BindPayValidateCodeResponseVo.class);
			if (!MessageHandle.checkSign(responseVo)) {
				json.put("code", "01");
				json.put("message", "验签失败");
				return json;
			}

			if (!"0000".equals(responseVo.getRt2_retCode())) {
				json.put("code", "01");
			} else {
				json.put("code", "00");
			}
			json.put("message", responseVo.getRt3_retMsg());
		} catch (Exception e) {
			e.printStackTrace();
			json.put("code", "01");
			json.put("message", "请求异常：" + e.getMessage());
		}
		return json;
	}

	@RequestMapping(value = "/bindCardPay")
	public ModelAndView bindCardPay(BindCardPayVo requestVo, Model model) {
		log.info("--------进入绑卡支付接口----------");
		ModelAndView mav = new ModelAndView();
		mav.setViewName("quickPayApi/response");
		try {
			Map reqestMap = MessageHandle.getReqestMap(requestVo);
			Map<String, Object> resultMap = HttpClientService.getHttpResp(reqestMap, REQUEST_URL_QUICKPAY);
			log.info("响应结果：" + resultMap);

			if ((Integer) resultMap.get("statusCode") != HttpStatus.SC_OK) {
				mav.addObject("message", "请求失败");
				return mav;
			}

			String resultMsg = (String) resultMap.get("response");
			if (!isJSON(resultMsg)) {
				mav.addObject("message", resultMsg);
				return mav;
			}

			BindCardPayResponseVo responseVo = JSONObject.parseObject(resultMsg, BindCardPayResponseVo.class);
			if (!MessageHandle.checkSign(responseVo)) {
				mav.addObject("message", "验签失败");
				return mav;
			}

			mav.addObject("json", JSONObject.toJSON(responseVo));
		} catch (Exception e) {
			e.printStackTrace();
			mav.addObject("message", "交易异常：" + e.getMessage());
		}
		return mav;
	}

	@RequestMapping(value = "/queryOrder")
	public ModelAndView queryOrder(QueryOrderVo requestVo, Model model) {
		log.info("--------进入订单查询接口----------");
		ModelAndView mav = new ModelAndView();
		mav.setViewName("quickPayApi/response");
		try {
			Map reqestMap = MessageHandle.getReqestMap(requestVo);
			Map<String, Object> resultMap = HttpClientService.getHttpResp(reqestMap, REQUEST_URL_QUICKPAY);
			log.info("响应结果：" + resultMap);

			if ((Integer) resultMap.get("statusCode") != HttpStatus.SC_OK) {
				mav.addObject("message", "请求失败");
				return mav;
			}

			String resultMsg = (String) resultMap.get("response");
			if (!isJSON(resultMsg)) {
				mav.addObject("message", resultMsg);
				return mav;
			}

			QueryOrderResponseVo responseVo = JSONObject.parseObject(resultMsg, QueryOrderResponseVo.class);
			if (!MessageHandle.checkSign(responseVo)) {
				mav.addObject("message", "验签失败");
				return mav;
			}

			mav.addObject("json", JSONObject.toJSON(responseVo));
		} catch (Exception e) {
			e.printStackTrace();
			mav.addObject("message", "交易异常：" + e.getMessage());
		}
		return mav;
	}

	public static boolean isJSON(String test) {
		try {
			JSONObject.parseObject(test);
		} catch (JSONException ex) {
			return false;
		}
		return true;
	}


}
